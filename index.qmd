---
title: "DimensionalData.jl"
subtitle: "Named dimensions for julia data"
author:
  - name: Rafael Schouten
    orcid: 
    email: rafaelschouten@gmail.com
    affiliation: 
      - name: Globe Intstitute, Copenhagen University
      - department: Section for Biodiversity
date: "2024-07-10"
# bibliography: AutoDiff.bib
engine: julia
format:
  revealjs:
    incremental: true
    toc: false
    toc-depth: 1
    toc-incremental: false
    slide-number: true
    overview: true
    code-line-numbers: false
    theme: [dark, style.scss]
execute:
    echo: true
---

## Why another named array package?

::: {.incremental}
- Geospatial data:
  - named dimensions and lookup values are ubiquitous
  - selecting spatial and temporal subsets is ubiquitous
  - there are a _lot_ of possible lookup configurations
  - multi-array datasets are also common
- ![xarray](https://xarray.dev/xarray-datastructure.png)
:::

# Concepts: Dimensions

## Dimension are wrappers 

```{julia}
#| echo: false
using DimensionalData 
```

\
They mark that the wrapped object belongs to the dimension:

. . .

An integer:
```{julia}
X(1)
```

. . .

A range:
```{julia}
X(50:10:100)
```

. . .

A selector :
```{julia}
X(Not(At(70)))
```

--- 

\
"Standard" dimensions (90% of spatial data):

```{julia}
X, Y, Z, Ti
```

. . .

Arbitrary dimensions (everything else)

```{julia}
Dim{:name}
```

# Lookups

- Hold lookup values along a dimension
- And traits like `Points` or `Intervals`
- mostly detected automatically in array constructors

- - -

You can define them manually when you need to:

```{julia}
using DimensionalData.Lookups
l = Sampled(1:10; sampling=Intervals(Start()), order=ForwardOrdered(), span=Regular())
```
\
```{julia}
Sampled <: AbstractSampled <: Aligned <: Lookup <: AbstractVector
```

# DimArray Constructors

- DimArray <: AbstractDimArray <: AbstractArray

```{julia}
#| echo: false
global A
global S
```

## 1 dimensional
\
```{julia}
A = DimArray([1, 2, 3], X([:a, :b, :c]))
```

## N dimensional 

With standard dimensions in a `Tuple`:

```{julia}
A = DimArray(rand(3, 4), (X([:a, :b, :c]), Y(10.0:10:40.0)))
```

---

With arbitrary `Dim` dimensions, in a `NamedTuple`:

```{julia}
DimArray(rand(3, 4), (a=[:a, :b, :c], b=10.0:10:40.0))
```

---

Shorthands: `rand`, `fill`, `zeros`, `ones` 

```{julia}
rand(X(6), Y(10:2:20))
```

# DimStack Constructors

- DimStack <: AbstractDimStack

## Layers with the same dimensions
\
```{julia}
ds = X([:a, :b, :c]), Ti(10.0:10:40.0)
S = DimStack((layer1=rand(Float32, 3, 4), layer2=zeros(Bool, 3, 4)), ds)
```

## Layers with different dimensions:
\
```{julia}
x, ti = X([:a, :b, :c]), Ti(10.0:10:40.0)
DimStack((twodims=rand(Float32, x, ti), onedim=zeros(Bool, x)))
```

# Named indexing

DimArray:
```{julia}
using BenchmarkTools
@btime $A[3, 4]        # Base Julia Array syntax
@btime $A[Y(4), X(3)]  # Dimension wrappers
@btime $A[Y=4, X=3]    # Keyword syntax
```

DimStack:
```{julia}
@btime $S[Ti(4), X(3)] # Dimension wrappers
@btime $S[Ti=4, X=3]   # Keyword syntax
```

# Selectors
- select data with lookup values

## At
\
Find exact or approximate matches
\
```{julia}
A = DimArray([1, 2, 3, 4], (X([10.0, 20.0, 40.0, 80.0])))
A[X(At(80.0))]
```

```{julia}
A[X(At(80.09; atol=0.1))]
```

## Near
\
Find the closest match
\
```{julia}
A[X(Near(85))]
```

## Contains
\
Find the interval that contains a value
\
```{julia}
# Define a DimArray with Intervals lookup
using DimensionalData.Lookups
A = DimArray(100:100:9900, X(1.0:1.0:99.0; sampling=Intervals(Start())))
# Index with Contains
A[X(Contains(9.5))]
```

## .. (an IntervalSets.jl Interval)
\
Select data inside an interval
\
```{julia}
A[X=9.5 .. 15]
```

## Where
\
Make dimensional queries
\
```{julia}
A[X=Where(isodd)]
```

# Plotting

## Plots.jl

```{julia}
using Plots
Plots.scatter(rand(X([:a, :b, :c, :d])))
```

## Makie.jl

```{julia}
using CairoMakie, Distributions
Makie.heatmap(rand(Normal(), X(100:10:200), Y([:a, :b, :c])))
```

# Integrations

- DimensionalData uses all abstract types so its extensible
- Just `dims` and `rebuild` methods let other array types work like a `DimArray`

## Some packages building on DimensionalData.jl

::: {.nonincremental}
- [Rasters.jl]()
- [YAXArrays.jl]() 
- [ClimateBase.jl]()
- [AstroImages.jl]()
- [PyramidScheme.jl]()
- [Arviz.jl]()
- [JuMP.jl]() (extension)
- [DynamicGrids.jl]()
:::

## Thanks
\
![](https://contrib.rocks/image?repo=rafaqz/DimensionalData.jl)

(And checkout the new docs by Lazaro Alonzo!)

[Docs](https://rafaqz.github.io/DimensionalData.jl/v0.27.3/)
